services:
  auth-database:
    container_name: auth-postgres
    image: bitnami/postgresql:latest
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_db
    ports:
      - "5433:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - internal

  contacts-database:
    container_name: contacts-postgres
    image: bitnami/postgresql:latest
    environment:
      POSTGRES_USER: contacts_user
      POSTGRES_PASSWORD: contacts_password
      POSTGRES_DB: contacts_db
    ports:
      - "5434:5432"
    volumes:
      - contacts-db-data:/var/lib/postgresql/data
    networks:
      - internal

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: message-service
    networks:
      - internal

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl await_startup -t 30"]
      interval: 10s
      timeout: 30s
      retries: 5
    networks:
      - internal

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - internal
    depends_on:
      - auth-service
      - ws-service

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    command: sh -c "while ! nc -z postgres 5432; do sleep 2; done && ./migrate up && ./main"
    ports:
      - "8080"
    environment:
      - ROOT_PATH=/app
      - DATABASE_URL=postgres://auth_user:auth_password@auth-database:5433/auth_db?sslmode=disable
    depends_on:
      auth-database:
        condition: service_started
    networks:
      - internal

  ws-service:
    container_name: ws-service
    build:
      context: ./ws-service
      dockerfile: Dockerfile
    ports:
      - "8081"
    environment:
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - internal

volumes:
  db-data:
  rabbitmq_data:
  auth-db-data:
  contacts-db-data:

networks:
  internal:
    driver: bridge
